#!/usr/bin/env php
<?php

declare(strict_types=1);

use app\helpers\IPHelper;

require(__DIR__ . '/../vendor/autoload.php');

define('MINIMUM_BITMASK', 8);

function doMain(): void
{
    $list = readFromStdin();
    $list = mergeList($list);
    foreach ($list as $entry) {
        $list2 = IPHelper::splitBlock($entry['startlong'], $entry['count']);
        foreach ($list2 as $tmp) {
            echo "$tmp\n";
        }
    }
}

function readFromStdin(): array
{
    $result = [];
    if ($fh = @fopen('php://stdin', 'r')) {
        while (!feof($fh)) {
            $line = trim((string)fgets($fh, 1024));
            if (preg_match('!^(\d+\.\d+\.\d+\.\d+)(?:/(\d+))?$!', $line, $match)) {
                $bitlen = (count($match) === 3) ? (int)$match[2] : 32;
                $bitlen = min(32, $bitlen);
                $bitlen = max(8, $bitlen);
                $iplong = ip2long($match[1]);
                if ($iplong !== false) {
                    $mask = IPHelper::bitmask($bitlen);
                    if ($mask !== null) {
                        $startip = ($iplong & $mask);
                        $result[] = [
                            'start' => long2ip($startip),
                            'startlong' => $startip,
                            'count' => (0xffffffff & ~$mask) + 1,
                        ];
                    }
                }
            }
        }
        fclose($fh);
    }
    usort($result, fn($a, $b) => ($a['startlong'] <=> $b['startlong']));
    return $result;
}

function mergeList(array $list): array
{
    $result = [];
    $i = 0;
    while ($i < count($list)) {
        $entry = $list[$i];
        $increment = 1;

        // 次のブロックが隣接していないか調べる
        for ($j = 1; $i + $j < count($list); ++$j) {
            $tmp = $list[$i + $j];
            if ($entry['startlong'] + $entry['count'] == $tmp['startlong']) {
                // 次のブロックが隣接している
                ++$increment;
                $entry['count'] += $tmp['count'];   // 隣接分をマージ
            } else {
                break;
            }
        }
        $result[] = $entry;
        $i += $increment;   // 自分 + 隣接していた分だけポインタをすすめる
    }

    return $result;
}

doMain();
